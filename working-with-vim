###   ###################################
###   Vim
###   ###################################

###   #####################################
###   pathogen.vim 
###   #####################################

Makes it super easy to install plugins and runtime files in their own private directories.

Add this to your vimrc:

>    call pathogen#infect()
>    syntax on
>    filetype plugin indent on


Now any plugins you wish to install can be extracted to a subdirectory under ~/.vim/bundle, and they will be added to the 'runtimepath'.

Use :Helptags to run :helptags on every doc/ directory in your 'runtimepath'.

GitHub: http://github.com/tpope/vim-pathogen

Install in ~/.vim/autoload

$   mkdir -p ~/.vim/autoload ~/.vim/bundle

$   curl -Sso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim


###   ######################################
###   airline
###   ######################################

Lean & mean status/tabline for vim

$   git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline


###   ######################################
###   solarized
###   ######################################

Nice color schemes for vim.

$   cd ~/.vim/bundle
$   git clone git://github.com/altercation/vim-colors-solarized.git

Edit .vimrc

>    syntax enable
>    set background=dark
>    colorscheme solarized

or, for the light background mode of Solarized:

>    syntax enable
>    set background=light
>    colorscheme solarized


### #######################################
### The Zen of Vim explained
### #######################################

The "Zen" of vi is that you're speaking a language.
The initial y is a verb.

The statement

    yy

is a synonym for

    y_

The y is doubled up to make it easier to type, since it is such a common operation.

This can also be expressed as

    dd P

(delete the current line and paste a copy back into place;
leaving a copy in the anonymous register as a side effect).

The y and d "verbs" take any movement as their "subject."

Thus

    yW

is "yank from here (the cursor) to the end of the current/next (big) word" and

    y'a

is "yank from here to the line containing the mark named 'a'."

If you only understand basic up, down, left, and right cursor movements then vi will be no more productive than a copy of "notepad" for you.

(Okay, you'll still have syntax highlighting and the ability to handle files larger than a piddling ~45KB or so; but work with me here).

#### #######################################
#### Movement 
#### ####################################### 

Go to first line

    gg

Go to line

    <nbr> gg

Go to last line

    G

In a paragraph of text, use

    {

and

    }

movements to the beginning or end of the paragraph respectively.
So, to move a paragraph of text, cut it using

    { d}

If the curseer is already on the first or last line of the paragraph then simply use

    d}

or

    d{

respectively.

The notion of "paragraph" defaults to something which is usually intuitively reasonable. Thus it often works for code as well as prose.


#### #######################################
#### Marks
#### ####################################### 

Vi has 26 "marks" and 26 "registers."

A mark is set to any cursor location using the m command.
Each mark is designated by a single lower case letter.
Thus

    ma

sets the 'a' mark to the current location, and

    mz

sets the 'z' mark.

You can move to the line containing a mark using the ' (single quote) command.

Thus

    'a

moves to the beginning of the line containing the 'a' mark.
You can move to the precise location of any mark using the

    ` (backquote)

command.
Thus

    `z

will move directly to the exact location of the 'z' mark.

Because these are "movements" they can also be used as subjects for other "statements."


Then we go to the other end of our desired text; we can start at either end, it doesn't matter.
Then we can simply use

    d`a

to cut or

    y`a

to copy. 



Searching forwards or backwards are movements in vi.
Thus they can also be used as "subjects" in our "statements." Use

    d/foo

to cut from the current line to the next line containing the string "foo" and

    y?bar

to copy from the current line to the most recent (previous) line containing "bar."

In addition to "verbs" and "subjects" vi also has "objects" (in the grammatical sense of the term).

So far I've only described the use of the anonymous register.

However, I can use any of the 26 "named" registers by prefixing the "object" reference with " (the double quote modifier).

Thus the command
    
    "add

is cutting the current line into the 'a' register and if I use

    "by/foo

yanking a copy of the text from here to the next line containing "foo" into the 'b' register.

To paste from a register, prefix the paste with the same modifier sequence:

    "ap

pastes a copy of the 'a' register's contents into the text after the cursor and
    
    "bP

pastes a copy from 'b' to before the current line.

This notion of "prefixes" also adds the analogs of grammatical "adjectives" and "adverbs" to our text manipulation "language".

Most commands (verbs) and movement (verbs or objects, depending on context) can also take numeric prefixes.

Thus 3J means "join the next three lines" and d5} means "delete from the current line through the end of the fifth paragraph down from here."

This is all intermediate level vi.

None of it is Vim specific and there are far more advanced tricks in vi if you're ready to learn them.

If you were to master just these intermediate concepts then you would probably find that you rarely need
to write any macros because the text manipulation language is sufficiently concise and expressive to do most things easily enough using the editor's "native" language.




