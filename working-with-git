### ===========================================
### git
### ===========================================

### ===========================================
### Install
### ===========================================

$   pacman -S git


1. Set the default name for git to use when you commit

$   git config --global user.name "Your Name Here"

2. Set the default email for git to use when you commit

$   git config --global user.email "your_email@example.com"



### ===========================================
### Clone a repository.
### ===========================================


#   git clone [repository-url] [save-directory]

Example:
$   git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline

This will set remote origin to the cloned URL

### ===========================================
### Create a new repository
### ===========================================

This repository is only used remotely or locally. Its a bare repository only used to store.
 
$   git init --bare


### ===========================================
### Push to git hub
### ===========================================

1. Create a remote named "origin" pointing at your GitHub repository

$   git remote add origin https://github.com/username/Hello-World.git

2. Send your commits in the "master" branch to GitHub

$   git push origin master


Show the remotes

$   git remote -v

>   origin  https://github.com/thedemz/linux-arch-install (fetch)
>   origin  https://github.com/thedemz/linux-arch-install (push)





### #############################################
### Commit message
### #############################################

$   git log --oneline -5 --author martin --before "Fri Mar 26 2009"

A well-crafted git commit message is the best way to communicate context
about a change to fellow developers.


There are well-established conventions as to what makes an idiomatic git commit message.
Indeed, many of them are assumed in the way certain git commands function.
There's nothing you need to re-invent.

Just follow the seven rules below and you're on your way to committing like a pro.

The seven rules of a great git commit message

1. Separate subject from body with a blank line
2. Limit the subject line to 50 characters
3. Capitalize the subject line
4. Do not end the subject line with a period
5. Use the imperative mood in the subject line
6. Wrap the body at 72 characters
7. Use the body to explain what and why vs. how

--- EXAMPLE ---
Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
--- EXAMPLE END ---

